#

CONFIG_F = "../config.json"
configfile: CONFIG_F

#### Algorithm configurations
ONE_NN_CORRELATION_LOG_TPM = 'FRAMEWORK_one_nn.FEATS_log_tpm'

IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_ir.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'
CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_cdc.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'
TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_tpr.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_true.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_true.FEATS_log_tpm'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ir.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_tpr.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_bnc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'

# Test no downweighting by class
PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_false.ASSERTAMBIGNEG_false.FEATS_log_tpm'

# BNC variants
PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_svm.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_bnc.PREP_pca_3000.BINARY_svm.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_bnc_nb.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'

# Different number of PCA components
PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_1500.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_750.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_375_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_375.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PCA_CONFIGS = [
    PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_375_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
]

# Different regularization parameters
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_00001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_001.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_01.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_1.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_10.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_100.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_10000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_100000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PENALTY_CONFIGS = [
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
]
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0002.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0004.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0006.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_0008.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_002.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_004.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_006.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.PENALTY_0_008.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
COMPARE_PENALTY_FINE_GRAINED_CONFIGS = [
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG,
    PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
]

# Trained on 10x genes
IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'

CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_cdc.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'
IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_ir.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'
TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_tpr.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ir.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_tpr.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'

#################################################################################################################
#   Train and test 1NN
#   Features: log-TPM
#################################################################################################################
rule train_and_apply_one_nn:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        '{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/apply_model.py -t {env_dir}/datasets/{train} -p {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{test} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )

        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_one_nn:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_one_nn:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous samples negative: false
####################################################

rule train_training_ind_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_ind_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)    

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   PCA components: 1500, 750, 375
####################################################
rule train_training_pca_ind_downweight_by_class_remove_ambig_compare_num_components:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        for c in commands:
            shell(c)


rule test_test_pca_ind_downweight_by_class_remove_ambig_compare_num_components:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        commands += [
            'python {src}/apply_model.py -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        for c in commands:
            shell(c)

rule evalute_rank_based_classifications_test_pca_ind_downweight_by_class_keep_ambig_compare_num_components:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PCA_CONFIGS
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Preprocess: PCA - 3,000 components
#   Penalties: 10, 100, 1000, 10000, 100000
######################################################
rule train_training_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        commands += [
            'python {src}/apply_model.py -c 0.5 -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        for c in commands:
            shell(c)


rule evaluate_rank_based_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_CONFIGS
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Preprocess: PCA - 3,000 components
#   Penalties: 0.002, 0.004, 0.006, 0.008, 0.0002,
#       0.0004, 0.0006, 0.0008
####################################################
rule train_training_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        [
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        commands += [
            'nohup python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo} &'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        for c in commands:
            shell('echo "{}"'.format(c))
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        models=[
            '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
    output:
        [
            '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        commands += [
            'python {src}/apply_model.py -c 0.5 -m {env}/trained_models/{train}/{algo}/model.dill {env}/datasets/{test} {feats} -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig_compare_penalties_fine_grained:
    input:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
    output:
        [
            '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        commands += [
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=algo
            )
            for algo in COMPARE_PENALTY_FINE_GRAINED_CONFIGS
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Preprocess: PCA - 3,000 components
#####################################################

rule train_training_pca_3000_ind_downweight_by_class_keep_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_keep_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
######################################################
rule train_training_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evaluate_rank_based_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_test_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Downweight by class: false
###################################################
rule train_training_pca_3000_ind_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_test_pca_3000_ind_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_test_pca_3000_ind_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
###################################################
rule train_all_pca_3000_ind_downweight_by_class:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Isotonic regression
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessors: PCA - 3000 components
#   Training set: bulk training set
#   Test set: bulk test set
#####################################################

rule train_training_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_binary_classifications_test_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


##################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: non-10x single-cell
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
##################################################
rule train_all_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_single_cell_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_rank_based_classifications_test_single_cell_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_test_single_cell_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            train_feats='log_tpm',
            test_feats='log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train_feats='log_tpm',
                test_feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train_feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


############  Cluster within each study and aggregate
rule test_single_cell_aggregate_leiden_1_0_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train='untampered_bulk_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_test_single_cell_aggregate_leiden_1_0_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bin_results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.bin_results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


###################################################
#   Algorithm: True Path Rule
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Training set: bulk training set
#   Test set: bulk test set
######################################################
rule train_training_pca_3000_tpr_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_tpr_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evaluate_rank_based_classifications_test_pca_3000_tpr_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_pca_3000_tpr_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


###################################################
#   Algorithm: Bayesian Network Correction
#   Binary classifier: Logistic regression
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessing: PCA - 3,000 components
#   Training set: bulk training set
#   Test set: bulk test set
###################################################
rule train_training_pca_3000_bnc_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_bnc_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule evalute_rank_test_pca_3000_bnc_downweight_by_class_remove_ambig:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_pca_3000_bnc_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


##################################################
#   Algorithm: Bayesian Network Correction
#   Binary classifier: SVM
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessing: PCA - 3,000 components
#   Training set: bulk training set
#   Test set: bulk test set
###################################################
rule train_training_pca_3000_ind_svm_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)


rule train_training_pca_3000_bnc_svm_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_bnc_svm_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_BNC_SVM_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

###########################################################
#   Algorithm: Bayesian Network Correction, Naive Bayes
#   Binary classifier: logistic regression
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessing: PCA - 3,000 components
#   Training set: bulk training set
#   Test set: bulk test set
############################################################
rule train_training_pca_3000_bnc_naive_bayes_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_bnc_naive_bayes_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_test_pca_3000_bnc_naive_bayesdownweight_by_class_remove_ambig:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_test_pca_3000_bnc_naive_bayes_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Cascaded Logistic Regression
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
######################################################
rule train_training_clr_downweight_by_class:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            )

        ]
        for c in commands:
            shell(c)


rule test_test_clr_downweight_by_class:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            )
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
####################################################
rule train_pca_3000_training_clr_downweight_by_class_keep_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_clr_downweight_by_class_keep_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )
        ]
        for c in commands:
            shell(c)


####################################################
##   Algorithm: Cascaded logistic regression
##   Features: log-TPM
##   Training set: bulk training set
##   Test set: bulk test set
##   Preprocess: PCA - 3,000 components
#   Assert ambighous terms negative: false
#####################################################
rule train_pca_3000_training_clr_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evaluate_rank_based_classifications_test_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_joint_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_joint.py "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


##################################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: full bulk dataset
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
##################################################

rule train_all_pca_3000_training_clr_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)


rule test_single_cell_pca_3000_clr_downweight_by_class_remove_ambig:
    input:  
        test_label='{}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),  
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_based_classifications_test_single_cell_clr_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


######### Aggregate by cluster, Leiden Resolution = 1.0
rule test_single_cell_aggregate_leiden_1_0_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/untampered_single_cell_primary_cells_with_data_cell_types_in_bulk/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                train='untampered_bulk_primary_cells_with_data',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule evalute_test_single_cell_aggregate_leiden_1_0_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bin_results='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py "Ind." {{input.bin_results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
                feats='aggregate_by_cluster_leiden_1_0_log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

########################## Cross-Validation ######################################

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Dataset: bulk training set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
###################################################
rule leave_study_out_train_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{dataset}/{algo}'.format(
                condor=config['condor_root'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{dataset}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_train_pca_3000_ind_downweight_by_class_remove_ambig:
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{dataset}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)


rule evalute_rank_based_classifications_leave_study_out_train_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


rule decision_thresholds_pr_curves_leave_study_out_train_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'python {src}/determine_threshold_per_label.py {{input}} -o {{output}}'.format(
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Dataset: full bulk
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
######################################################
rule leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{dataset}/{algo}'.format(
                condor=config['condor_root'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{dataset}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{condor}/{dataset}/{algo}/condor.submit'.format(
            condor=config['condor_root'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{dataset}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)


rule evalute_rank_based_classifications_leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

rule decision_thresholds_pr_curves_leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'python {src}/determine_threshold_per_label.py {{input}} -o {{output}}'.format(
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM, 10x genes
#   Preprocessors: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Dataset: full bulk dataset
################################################
rule leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig_10x:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{dataset}/{algo}'.format(
                condor=config['condor_root'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{dataset}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig_10x:
    input:
        '{condor}/{dataset}/{algo}/condor.submit'.format(
            condor=config['condor_root'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{dataset}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule evalute_rank_based_classifications_leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig_10x:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)
 
rule decision_thresholds_pr_curves_leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig_10x:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/label_to_pr_curve.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'python {src}/determine_threshold_per_label.py {{input}} -o {{output}}'.format(
                src=config['cello_dev']
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

###############################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM
#   Preprocessors: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Dataset: full bulk dataset
################################################
rule leave_study_out_all_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{algo}'.format(
                condor=config['condor_root'],
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

########################## 10x Experiments #######################################

#####################################################
#   Algorithm: Isotonic regression
#   Features: log-TPM, 10x genes
#   Preprocessors: PCA - 3,000 components
#   Assert ambiguous terms negative: False
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
######################################################
rule train_all_pca_3000_ind_downweight_by_class_10x_genes:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)

rule train_all_pca_3000_ir_downweight_by_class_10x_genes:
    input:
        label='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )   
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -m {{input.model}} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)


rule test_10x_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


#
##
##
################### Leiden Resolution 0.5
rule test_10x_aggregate_by_cluster_leiden_0_5_pca_3000_ir_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_0_5_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_based_classifications_10x_aggregate_by_cluster_leiden_0_5_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/compare_methods_cell_type_centric_rank_based.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_0_5_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_0_5_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

######### Leiden resolution = 1.0
rule test_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


######### Leiden resolution = 2.0
rule test_10x_aggregate_by_cluster_leiden_2_0_pca_3000_ir_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_2_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_2_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_2_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

# Leiden resolution = 4.0
rule test_10x_aggregate_by_cluster_leiden_4_0_pca_3000_ir_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_4_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_4_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_4_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


################ Leiden resolution = 8.0
rule test_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_8_0_log_cpm'
        ),
        thresh='{env}/results/leave_study_out_experiments/{dataset}/{algo}/decision_thresholds.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -f {{input.thresh}} -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_rank_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_rank.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

######################################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM, 10x genes
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
#######################################################
rule train_all_pca_3000_cdc_downweight_by_class_10x_genes:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)

rule test_10x_aggregate_by_cluster_leiden_1_0_pca_3000_clr_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_cpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_1_0_pca_3000_clr_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

#######################################################
##   Algorithm: True Path Rule
##   Features: log-TPM, 10x genes
##   Training set: full bulk dataset
##   Test set: Zheng 10x PBMC, 2000 cells per type
#######################################################
rule train_all_pca_3000_tpr_downweight_by_class_10x_genes:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)

rule test_10x_aggregate_by_cluster_leiden_1_0_pca_3000_tpr_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='aggregate_by_cluster_leiden_1_0_log_cpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule evalute_binary_classifications_10x_aggregate_by_cluster_leiden_1_0_pca_3000_tpr_downweight_by_class:
    input:
        results='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/binary_classification_results.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/evaluate/evaluate_method_cell_type_centric_binary.py -c "Ind." {{input.results}} {env}/datasets/{test}/labels.json {env}/datasets/{test}/labels.json -o {env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


############################# Generate figures #######################################

###################################
#   Plot: CDF of label inconsistencies
###################################
rule analyze_inconsistent_labelings_leave_study_out_all_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/leave_study_out_full_bulk.CDF_inconsistences.pdf'.format(
            env=config['env_dir']
        )
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/analyze_inconsistent_labellings.py {{input}} {env}/datasets/{dataset}/labels.json leave_study_out_full_bulk -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)


################################################
#   Plot: UpSet plot of dataset compositions
################################################
rule upset_all:
    output:
        '{env}/final_figures/full_bulk_dataset_upset.pdf'.format(
            env=config['env_dir']
        )
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_upset_dataset_composition.py {env}/datasets/{dataset} -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)

rule upset_single_cell:
    output:
        '{env}/final_figures/single_cell_dataset_upset.pdf'.format(
            env=config['env_dir']
        )
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_upset_dataset_composition.py {env}/datasets/{dataset} -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plots: 
#   - Comparison box plots
#       - Avg. Precision
#   - Joint precision recall curves
# Test set: Bulk test set
# Algorithms: 
#   - Independent classifiers
#   - Isotonic Regression
#   - True Path Rule
#   - BNC
#   - 1NN
# PCA: 3000 components
########################################

rule draw_AP_boxplots_test_pca_3000_methods:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        tpr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        ind='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bnc='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        nn='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    output:
        '{env}/final_figures/test_bulk_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.ir}},{{input.tpr}},{{input.clr}},{{input.ind}},{{input.bnc}},{{input.nn}} "IR,TPR,CLR,Ind.,BNC,1NN" "Avg. Precision" "Method" test_bulk_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_joint_pr_curves_test_pca_3000_methods:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        tpr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        ind='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bnc='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        nn='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    output:
        '{env}/final_figures/test_bulk_methods_joint_PR_curves.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_joint_pr_curves.py {{input.ir}},{{input.tpr}},{{input.clr}},{{input.ind}},{{input.bnc}},{{input.nn}} "IR,TPR,CLR,Ind.,BNC,1NN" -o {env}/final_figures/test_bulk_methods_joint_PR_curves'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plots: 
#   - Comparison box plots
#       - Avg. Precision
#   - Joint precision recall curves
# Test set: Bulk test set
# Algorithms: 
#   - BNC
#   - BNC, Naive Bayes
# PCA: 3000 components
#######################################
rule draw_AP_boxplots_test_pca_3000_bnc_methods:
    input:
        bnc='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bnc_nb='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_bnc_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.bnc}},{{input.bnc_nb}} "BNC-LR-bins,NB-LR-bins" "Avg. Precision" "Method" test_bulk_bnc_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_joint_pr_curves_test_pca_3000_bnc_methods:
    input:
        bnc='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        bnc_nb='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/joint_pr_curve.json'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_NAIVE_BAYES_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_bnc_methods_joint_PR_curves.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_joint_pr_curves.py {{input.bnc}},{{input.bnc_nb}} "BNC-LR-bins,NB-LR-bins" -o {env}/final_figures/test_bulk_bnc_methods_joint_PR_curves'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plot: Graph colored by metric
# Metrics: 
#   - F1-score
#   - Avg. Precision
# Test set: Bulk test set
# Algorithm: Isotonic regression
# PCA: 3000 components
#######################################
rule draw_F1_scores_on_graph_test_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_scores_on_graph_test_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_IR_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='test_set.untampered_bulk_primary_cells_with_data'
            )
        ]
        for c in commands:
            shell(c)


#######################################
# Plot: Comparison boxplots
# Metric: Avg. Precision
# Test set: Bulk test set
# Algorithm: Independent classifiers
# Class-balanced: Yes vs. No
########################################
rule draw_AP_boxplots_test_downweight_vs_no_downweight:
    input:
        downweight='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        no_downweight='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_downweight_vs_no_downweight_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.downweight}},{{input.no_downweight}} "Yes,No" "Avg. Precision" "Class-Balanced Loss Function" test_bulk_downweight_vs_no_downweight_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_boxplots_test_downweight_vs_no_downweight:
    input:
        downweight='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        no_downweight='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_bulk_downweight_vs_no_downweight_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands = [
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py {{input.downweight}},{{input.no_downweight}} "Yes,No" "F1-Score" "Class-Balanced Loss Function" test_bulk_downweight_vs_no_downweight_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################
# Plot: Comparison boxplots
# Metric: Avg. Precision
# Test set: Bulk test set
# Algorithm: Independent classifiers
# PCA components: 3000, 1500, 750, 375
#######################################
rule draw_AP_score_comparison_boxplots_test_pca_components:
    input:
        pca_3000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        pca_1500='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        pca_750='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        pca_375='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_375_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_pca_components_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.pca_3000}},{{input.pca_1500}},{{input.pca_750}},{{input.pca_375}}" "3000,1500,750,375" "Avg. Precision" "Number of Components" test_set_pca_components_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

##########################################
# Plot: Comparison boxplots
# Metric: Avg. Precision
# Test set: Bulk test set
# Algorithm: Independent classifiers
# PCA components: 3000
# Penalties: 10, 100, 1000, 10000, 100000
###########################################
rule draw_AP_score_comparison_boxplots_test_penalties:
    input:
        c_0_00001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_penalties_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.c_0_00001}},{{input.c_0_0001}},{{input.c_0_001}},{{input.c_0_01}},{{input.c_0_1}},{{input.c_1}},{{input.c_10}},{{input.c_100}},{{input.c_1000}},{{input.c_10000}},{{input.c_100000}}" "0.00001,0.0001,0.001,0.01,0.1,1.0,10.0,100.0,1000.0,10000.0,100000.0" "Avg. Precision" "Penalty" test_set_penalties_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_score_comparison_boxplots_test_penalties:
    input:
        c_0_00001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_00001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_01='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_01_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_1='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_1_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_1000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_10000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_10000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_100000='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_100000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/test_set_penalties_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_00001}},{{input.c_0_0001}},{{input.c_0_001}},{{input.c_0_01}},{{input.c_0_1}},{{input.c_1}},{{input.c_10}},{{input.c_100}},{{input.c_1000}},{{input.c_10000}},{{input.c_100000}}" "0.00001,0.0001,0.001,0.01,0.1,1.0,10.0,100.0,1000.0,10000.0,100000.0" "F1-Score" "Penalty" test_set_penalties_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)


rule draw_AP_score_comparison_boxplots_test_fine_grained_penalties:
    input:
        c_0_0001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0001_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_0008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_0008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_001='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_002='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_002_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_004='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_004_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_006='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_006_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        c_0_008='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_C_0_008_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
    output:
        '{env}/final_figures/test_set_fine_grained_penalties_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.c_0_0001}},{{input.c_0_0002}},{{input.c_0_0004}},{{input.c_0_0006}},{{input.c_0_0008}},{{input.c_0_001}},{{input.c_0_002}},{{input.c_0_004}},{{input.c_0_006}},{{input.c_0_008}}" "0.0001,0.0002,0.0004,0.0006,0.0008,0.001,0.002,0.004,0.006,0.008" "Avg. Precision" "Penalty" test_set_fine_grained_penalties_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#####################################
# Plot: Colored ontology graph
# Metric: F1-Score
# Test set: 10x 
# Algorithm: Independent classifiers
# Leiden resolution: 1.0
######################################
rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_scores_on_graph_10x_aggregate_by_cluster_leiden_1_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_aggregate_by_cluster_leiden_8_0_pca_3000_ir_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_8_0_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_score_comparison_boxplots_10x_aggregate_by_cluster_leiden_parameters:
    input:
        met_0_5='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_0_5_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_1_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_2_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_2_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_4_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_4_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        met_8_0='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_8_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_parameters_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py -p "{{input.met_0_5}},{{input.met_1_0}},{{input.met_2_0}},{{input.met_4_0}},{{input.met_8_0}}" "0.5,1.0,2.0,4.0,8.0" F1-Score "Leiden Resolution" 10x_leiden_parameters_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_score_comparison_boxplots_10x_aggregate_by_cluster_leiden_1_0_methods:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        tpr='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/final_figures/10x_leiden_1_0_methods_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.ir}},{{input.tpr}},{{input.clr}}" "IR,TPR,CLR" F1-Score "Method" 10x_leiden_1_0_methods_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

##### 10x data, comparison to scMatch

rule draw_F1_score_comparison_boxplots_10x_compare_other_methods:
    input:
        ours='{env}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='aggregate_by_cluster_leiden_1_0_log_cpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        ),
        scmatch='{env}/results/other_methods/scMatch/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        )
    output:
        '{env}/final_figures/10x_compare_other_methods_F1_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py  "{{input.ours}},{{input.scmatch}}" "CellO,scMatch" F1-Score "Method" 10x_compare_other_methods_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_10x_scMatch:
    input:
        '{env}/results/other_methods/scMatch/zheng_10x_PBMC_2000_cells_per_type/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir']
        )
    output:
        '{env}/final_figures/scMatch_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='zheng_10x_PBMC_2000_cells_per_type'
            )
        ]
        for c in commands:
            shell(c)

###### non-10x single-cell, IR, leiden resolution = 1.0
rule draw_F1_scores_on_graph_single_cell_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            train_feats='log_tpm',
            test_feats='log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_scores_on_graph_single_cell_aggregate_by_cluster_leiden_1_0_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_leiden_1_0_IR_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)


rule draw_AP_scores_on_graph_single_cell_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            train_feats='log_tpm',
            test_feats='log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_IR_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

rule draw_AP_scores_on_graph_single_cell_aggregate_by_cluster_leiden_1_0_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_leiden_1_0_IR_AP_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} "Avg. Precision" {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

rule draw_PR_curves_on_graph_single_cell_aggregate_by_cluster_leiden_1_0_ir_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )   
    output: 
        '{env}/final_figures/single_cell_leiden_1_0_IR_PR_curves_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_pr_curves_on_graph.py {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

###### non-10x single-cell, CLR, leiden resolution = 1.0
rule draw_F1_scores_on_graph_single_cell_aggregate_by_cluster_leiden_1_0_clr_pca_3000_ind_downweight_by_class:
    input:
        '{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_leiden_1_0_CLR_F1_scores_on_graph.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_ontology_colored_by_metrics.py {{input}} F1-Score {env}/datasets/{dataset}/labels.json -o {{output}}'.format(
                src=config['cello_dev'],
                env=config['env_dir'],
                dataset='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk'
            )
        ]
        for c in commands:
            shell(c)

###### non-10x single-cell, compare CLR and IR leiden resolution = 1.0
rule draw_AP_score_comparison_boxplots_single_cell_aggregate_by_cluster_leiden_1_0:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.ir}},{{input.clr}}" "IR,CLR" "Avg. Precision" "Method" single_cell_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

###### non-10x single-cell, compare IR when clustering (leiden resolution = 1.0) versus not clustering
rule draw_AP_score_comparison_boxplots_single_cell_aggregate_by_cluster_leiden_1_0_vs_no_leiden:
    input:
        clust='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        no_clust='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_IR_leiden_1_0_vs_no_leiden_AP_score_boxplots.pdf'.format(env=config['env_dir']),
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.clust}},{{input.no_clust}}" "Cluster,No Clustering" "Avg. Precision" "Features" single_cell_IR_leiden_1_0_vs_no_leiden_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

rule draw_F1_score_comparison_boxplots_single_cell_aggregate_by_cluster_leiden_1_0_vs_no_leiden:
    input:
        clust='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}_FEATS_{feats}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            feats='aggregate_by_cluster_leiden_1_0_log_tpm',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        no_clust='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/binary_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_IR_leiden_1_0_vs_no_leiden_F1_score_boxplots.pdf'.format(env=config['env_dir']),
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.clust}},{{input.no_clust}}" "Cluster,No Clustering" "F1-Score" "Features" single_cell_IR_leiden_1_0_vs_no_leiden_F1_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)



# no_agg
rule draw_AP_score_comparison_boxplots_single_cell:
    input:
        ir='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        ),
        clr='{env}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/evaluation/rank_cell_type_metrics.tsv'.format(
            env=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='untampered_single_cell_primary_cells_with_data_cell_types_in_bulk',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env}/final_figures/single_cell_methods_AP_score_boxplots.pdf'.format(env=config['env_dir'])
    run:
        commands=[
            'mkdir -p {env}/final_figures'.format(
                env=config['env_dir']
            ),
            'python {src}/evaluate/draw_comparison_boxplots.py "{{input.ir}},{{input.clr}}" "IR,CLR" "Avg. Precision" "Method" single_cell_methods_AP_score_boxplots -o {env}/final_figures'.format(
                src=config['cello_dev'],
                env=config['env_dir']
            )
        ]
        for c in commands:
            shell(c)

#######################################################
#   Algorithm: Isotonic Regression
#   Features: log-TPM, 10x genes
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
#######################################################
rule train_all_ir_downweight_by_class_10x_genes:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            )

        ]
        for c in commands:
            shell(c)



