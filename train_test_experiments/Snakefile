#

CONFIG_F = "../config.json"
configfile: CONFIG_F

#### Algorithm configurations
ONE_NN_CORRELATION_LOG_TPM = 'FRAMEWORK_one_nn.FEATS_log_tpm'
IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_ir.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'
CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_cdc.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'
TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_tpr.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_true.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_true.FEATS_log_tpm'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ir.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_tpr.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_cdc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_bnc.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'

# Different number of PCA components
PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_1500.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'
PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG = 'FRAMEWORK_ind.PREP_pca_750.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm'

# Trained on 10x genes
IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'
CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_cdc.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'
IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_ir.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'
TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x = 'FRAMEWORK_tpr.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm_10x_genes'

PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x = 'FRAMEWORK_ind.PREP_pca_3000.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.ASSERTAMBIGNEG_false.FEATS_log_tpm_10x_genes'

#################################################################################################################
#   Train and test 1NN
#   Features: log-TPM
#################################################################################################################
rule train_and_apply_one_nn:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        '{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python {src}/apply_model.py -t {env_dir}/datasets/{train} -p {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{test} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )

        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous samples negative: false
####################################################

rule train_training_ind_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_ind_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)    

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 1,500 components
######################################################
rule train_training_pca_1500_ind_downweight_by_class:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_1500_ind_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 1,500 components
######################################################
rule train_training_pca_750_ind_downweight_by_class:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_750_ind_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_1500_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_750_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Assert ambiguous terms negative: true
#   Preprocess: PCA - 3,000 components
#####################################################

rule train_training_pca_3000_ind_downweight_by_class_keep_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_keep_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
######################################################
rule train_training_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)

####################################################
#   Algorithm: Isotonic regression
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessors: PCA - 3000 components
#   Training set: bulk training set
#   Test set: bulk test set
#####################################################

rule train_training_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_ir_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


###################################################
#   Algorithm: True Path Rule
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Training set: bulk training set
#   Test set: bulk test set
######################################################
rule train_training_pca_3000_tpr_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_tpr_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)



###################################################
#   Algorithm: Bayesian Network Correction
#   Features: log-TPM
#   Assert ambiguous terms negative: false
#   Preprocessing: PCA - 3,000 components
#   Training set: bulk training set
#   Test set: bulk test set
###################################################
rule train_training_pca_3000_bnc_downweight_by_class_remove_ambig:
    input:
        labels='{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        data='{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_BNC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)



####################################################
#   Algorithm: Cascaded Logistic Regression
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
######################################################
rule train_training_clr_downweight_by_class:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            )

        ]
        for c in commands:
            shell(c)


rule test_test_clr_downweight_by_class:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            )
        ]
        for c in commands:
            shell(c)


####################################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
####################################################
rule train_pca_3000_training_clr_downweight_by_class_keep_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_clr_downweight_by_class_keep_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_KEEP_AMBIG
            )
        ]
        for c in commands:
            shell(c)

####################################################
##   Algorithm: Cascaded logistic regression
##   Features: log-TPM
##   Training set: bulk training set
##   Test set: bulk test set
##   Preprocess: PCA - 3,000 components
#   Assert ambighous terms negative: false
#####################################################
rule train_pca_3000_training_clr_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )

        ]
        for c in commands:
            shell(c)

rule test_test_pca_3000_clr_downweight_by_class_remove_ambig:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/apply_model.py -c 0.5 -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell(c)


########################## Cross-Validation ######################################

###################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM
#   Training set: bulk training set
#   Test set: bulk test set
#   Preprocess: PCA - 3,000 components
#   Assert ambiguous terms negative: false
######################################################
rule leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{algo}'.format(
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)


################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM, 10x genes
#   Preprocessors: PCA - 3,000 components
#   Assert ambiguous terms negative: false
#   Dataset: full bulk dataset
################################################
rule leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig_10x:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    run:
        commands = [
            'mkdir -p {condor}/{algo}'.format(
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/condor_primary.py {src}/training_parameter_sets/{algo}.json {env}/datasets/{dataset} {condor}/{algo} {src}/train_test_experiments/leave_study_out_condorized/condor_tarball.tar.gz {src}/train_test_experiments/leave_study_out_condorized/condor_executable.bash'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule gather_leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig_10x:
    input:
        '{condor}/{algo}/condor.submit'.format(
            condor=config['condor_root'],
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/train_test_experiments/leave_study_out_condorized/gather_condor_results.py {condor}/{algo} fold_classification_results.tsv -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                condor=config['condor_root'],
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)

rule generate_pr_curves_leave_study_out_all_pca_3000_ind_downweight_by_class_remove_ambig_10x:
    input:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/classification_results.tsv'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation/pr_curves.json'.format(
            env=config['env_dir'],
            dataset='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                env=config['env_dir'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_CLR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG
            ),
            'python {src}/evaluate/compare_methods_cell_type_centric_rank_based.py "Ind." {{input}} {env}/datasets/{dataset}/labels.json {env}/datasets/{dataset}/labels.json -o {env}/results/leave_study_out_experiments/{dataset}/{algo}/evaluation'.format(
                env=config['env_dir'],
                src=config['cello_dev'],
                dataset='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell("echo '{}'".format(c))
            shell(c)
                

########################## 10x Experiments #######################################

#####################################################
#   Algorithm: Independent classifiers
#   Features: log-TPM, 10x genes
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
######################################################
rule train_all_ind_downweight_by_class_10x_genes:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)


rule test_10x_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule test_10x_magic_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm_magic'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm_magic',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm_magic',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm_magic',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule test_10x_cluster_0_8_magic_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm_leiden_0_8_magic'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm_leiden_0_8_magic',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule test_10x_cluster_1_6_magic_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm_leiden_1_6_magic'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm_leiden_1_6_magic',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_1_6_magic',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_1_6_magic',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)

rule test_10x_cluster_3_2_magic_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm_leiden_3_2_magic'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm_leiden_3_2_magic',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_3_2_magic',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_3_2_magic',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


#####################################################
##   Algorithm: Independent classifiers
##   Features: log-TPM, 10x genes
##   Training set: full bulk dataset
##   Test set: Zheng 10x PBMC, 2000 cells per type
#   Preprocess: PCA - 3,000 components
######################################################
rule train_all_pca_3000_ind_downweight_by_class_10x_genes:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )

        ]
        for c in commands:
            shell(c)

rule test_10x_cluster_0_8_magic_pca_3000_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm_leiden_0_8_magic'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm_leiden_0_8_magic',
            algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=PCA_3000_IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
            )
        ]
        for c in commands:
            shell(c)


#######################################################
#   Algorithm: Isotonic Regression
#   Features: log-TPM, 10x genes
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
#######################################################
rule train_all_ir_downweight_by_class_10x_genes:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            )

        ]
        for c in commands:
            shell(c)


rule test_ir_10x_cluster_0_8_magic_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm_leiden_0_8_magic'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm_leiden_0_8_magic',
            algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=IR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            )
        ]
        for c in commands:
            shell(c)


#######################################################
#   Algorithm: True Path Rule
#   Features: log-TPM, 10x genes
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
########################################################
rule train_all_tpr_downweight_by_class_10x_genes:
    input:
        labels='{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_REMOVE_AMBIG_10x
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            ),
            'python {src}/train_model.py -m {{input.model}} {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            )

        ]
        for c in commands:
            shell(c)

rule test_tpr_10x_cluster_0_8_magic_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm_leiden_0_8_magic'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm_leiden_0_8_magic',
            algo=TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=TPR_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            )
        ]
        for c in commands:
            shell(c)


#######################################################
#   Algorithm: Cascaded logistic regression
#   Features: log-TPM, 10x genes
#   Training set: full bulk dataset
#   Test set: Zheng 10x PBMC, 2000 cells per type
#######################################################
rule train_all_cdc_downweight_by_class_10x_genes:
    input:
        '{}/datasets/untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm_10x_genes'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            ),
            'python {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            )

        ]
        for c in commands:
            shell(c)

rule test_cdc_10x_cluster_0_8_magic_ind_downweight_by_class:
    input:
        test_label='{}/datasets/zheng_10x_PBMC_2000_cells_per_type/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/zheng_10x_PBMC_2000_cells_per_type/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_cpm_leiden_0_8_magic'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='untampered_bulk_primary_cells_with_data',
            test='zheng_10x_PBMC_2000_cells_per_type',
            train_feats='log_tpm',
            test_feats='log_cpm_leiden_0_8_magic',
            algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                test='zheng_10x_PBMC_2000_cells_per_type',
                train='untampered_bulk_primary_cells_with_data',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            ),
            'python {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {test_feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_FEATS_{train_feats}_TEST_{test}_FEATS_{test_feats}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='untampered_bulk_primary_cells_with_data',
                test='zheng_10x_PBMC_2000_cells_per_type',
                train_feats='log_tpm',
                test_feats='log_cpm_leiden_0_8_magic',
                algo=CDC_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS_10x
            )
        ]
        for c in commands:
            shell(c)
