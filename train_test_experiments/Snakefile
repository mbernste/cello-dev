#

CONFIG_F = "../config.json"
configfile: CONFIG_F

#### Algorithm configurations
ONE_NN_CORRELATION_LOG_TPM = 'FRAMEWORK_one_nn.FEATS_log_tpm.json'
IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS = 'FRAMEWORK_ind.BINARY_lr.PENALTY_l2.SOLVER_liblinear.INTERCEPTSCALE_1000.DOWNWEIGHTBYCLASS_true.FEATS_log_tpm'

rule train_and_apply_one_nn:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        '{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=ONE_NN_CORRELATION_LOG_TPM
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            ),
            'python2.7 {src}/apply_model.py -t {env_dir}/datasets/{train} -p {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{test} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                algo=ONE_NN_CORRELATION_LOG_TPM
            )

        ]
        for c in commands:
            shell(c)

rule train_ind_downweight_by_class:
    input:
        '{}/datasets/train_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        '{env}/datasets/train_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        )
    output:
        '{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    run:
        commands = [
            'mkdir -p {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            ),
            'python2.7 {src}/train_model.py {src}/training_parameter_sets/{algo}.json {env_dir}/datasets/{train} -o {env_dir}/trained_models/{train}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            )

        ]
        for c in commands:
            shell(c)

rule test_ind_downweight_by_class:
    input:
        test_label='{}/datasets/test_set.untampered_bulk_primary_cells_with_data/labels.json'.format(config['env_dir']),
        test_data='{env}/datasets/test_set.untampered_bulk_primary_cells_with_data/{feats}.h5'.format(
            env=config['env_dir'],
            feats='log_tpm'
        ),
        model='{env_dir}/trained_models/{train}/{algo}/model.dill'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    output:
        '{env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}/classification_results.tsv'.format(
            env_dir=config['env_dir'],
            train='train_set.untampered_bulk_primary_cells_with_data',
            test='test_set.untampered_bulk_primary_cells_with_data',
            algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
        )
    run:
        commands = [
            'mkdir -p {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                test='test_set.untampered_bulk_primary_cells_with_data',
                train='train_set.untampered_bulk_primary_cells_with_data',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            ),
            'python2.7 {src}/apply_model.py -m {{input.model}} {env_dir}/datasets/{test} {feats} -o {env_dir}/results/train_test_experiments/TRAIN_{train}_TEST_{test}/{algo}'.format(
                env_dir=config['env_dir'],
                src=config['cello_dev'],
                train='train_set.untampered_bulk_primary_cells_with_data',
                test='test_set.untampered_bulk_primary_cells_with_data',
                feats='log_tpm',
                algo=IND_LR_L2_LIBLINEAR_1000_DOWNWEIGHT_BY_CLASS
            )
        ]
        for c in commands:
            shell(c)    

